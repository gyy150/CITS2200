import java.util.*;
public class PathList {
	private int PathCount;
	public LinkedList<ShortestPath> PathList;
	
	/**
	 * reverse a path list 
	 * @param PL the path list to be reversed 
	 * @param sourcevertex   the beginning vertx 
	 * @return
	 */
	public static PathList reversePath(PathList PL ){
		int sourcevertex = PL.PathList.getFirst().p.getLast();							//get the last vertex from the first shortest path with the pathlist to be reversed, this vertex is source vertex, since it will begin from thi vertex
		PathList pl = new PathList();
		
		for(ShortestPath p : PL.PathList){
			ShortestPath p3 = new ShortestPath();
			for(int a : p.p){
				p3.p.addFirst(a);
			}
			pl.PathList.add(p3);
		}
		
		return PL;
	}
	
	public PathList(){
		this.PathList = new LinkedList<ShortestPath>();
		this.PathCount = 0;
	}
	public int getPathCount(){
		return this.PathCount;
	}
	public void increaseCountBy(int n){
		this.PathCount = this.PathCount +n;
	}
	
	public void increaseCount(){
		this.PathCount++;
	}
	
	public void decreaseCount(){
		this.PathCount--;
	}
	
	
	
	/**
	 * used to create path from one vertex to another one when they are directly connected 
	 * @param s the index of source vertex
	 */
	
	public PathList(int s){
		this.PathList = new LinkedList<ShortestPath>();
		this.PathCount = 1;
		ShortestPath p = new ShortestPath(s);
		this.PathList.add(p);
		
	}
	/**
	 * 
	 * @param p a list of path to be added to the current collection of path
	 */
	public void addPath(LinkedList<ShortestPath> p ){
		for(ShortestPath a : p){
			this.PathList.add(a);
		}
	}
	/**
	 * clear all the path stored inside the path list, also reset the path count to be 0
	 */
	public void clearPath(){
		this.PathList.clear();
		this.PathCount = 0;
	}
	

	public void printAllPath(){
		for(ShortestPath p :PathList){
			p.printPath();
		}
	}
	
	public LinkedList<ShortestPath>  combinePath(PathList PL){
		
		LinkedList<ShortestPath> CombinedPathList = new LinkedList<ShortestPath>();
		for(ShortestPath p1: this.PathList){
			for(ShortestPath p2 : PL.PathList){
				ShortestPath p3 = new ShortestPath();
				for(int a : p1.p){
					p3.p.add(a);
				}
				for(int a: p2.p){
					p3.p.add(a);
				}
				CombinedPathList.add(p3);
			}
		}
		return CombinedPathList;
	}
}
