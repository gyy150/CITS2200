import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
public class InputReader {
	public class InputReader(String[] args) {
		
	
		
		try (BufferedReader br = new BufferedReader(new FileReader("428333.edges")))
		{

			String sCurrentLine;
			String[] v;													//edge specified by two vertex
			int Vertex1Index;
			int Vertex2Index;
			LinkedList<Edge> EdgeList = new LinkedList<Edge>();  		//linked list containing all edges
			
			//*********innitializing and creating the first two node in the binary tree from the first line of text file
			sCurrentLine = br.readLine();
			v = sCurrentLine.split(" ");
			int vertex1 = Integer.parseInt(v[0]);
			BinarySearchTree VertexTree = new BinarySearchTree(vertex1);  				//creating a new binary seach tree, an tree with a node 0 at root
			Vertex1Index = BinarySearchTree.IndexCounter;
			int vertex2 = Integer.parseInt(v[1]);   
			Vertex2Index = VertexTree.addNode(vertex2);	
			EdgeList.add( new Edge( Vertex1Index , Vertex2Index ,vertex1 , vertex2 )  );
			//*************************************************************************************
			
			
			
			while ((sCurrentLine = br.readLine()) != null) {
				v = sCurrentLine.split(" ");
				System.out.println(v[0] + " " + v[1]);
				vertex1 = Integer.parseInt(v[0]);
				Vertex1Index = VertexTree.addNode(vertex1);				//if vertex has never been put into the tree brfore
				
				vertex2 = Integer.parseInt(v[1]);          
				Vertex2Index = VertexTree.addNode(vertex2);	
				EdgeList.add( new Edge( Vertex1Index , Vertex2Index ,vertex1 , vertex2 )  );
				
			}
			
			
			//************contructing the vertext array and adjacency matrix from the edge list 
			int NumberofVertex = BinarySearchTree.IndexCounter+1;
			int[] VertexArray = new int[NumberofVertex];
			int[] VertexEdgeNumber = new int[NumberofVertex];
			int[][] AdjacencyMatrix = new int[NumberofVertex][NumberofVertex];
			ListIterator<Edge> listIterator = EdgeList.listIterator();
			while (listIterator.hasNext()) {
				Edge E = listIterator.next();
				
				//*******************if the number of edges incident on one node is 0, then this node has never been seen before, so update vertex array first
				if(VertexEdgeNumber[E.Vertex1Index] == 0 ){
					VertexArray[E.Vertex1Index] = E.Vertex1;
					VertexEdgeNumber[E.Vertex1Index] = 1; 
				}
				else{
					VertexEdgeNumber[E.Vertex1Index] = VertexEdgeNumber[E.Vertex1Index] + 1; 					//if not, then only update unmber of incident edges
				}
				
				if(VertexEdgeNumber[E.Vertex2Index] == 0 ){
					VertexArray[E.Vertex2Index] = E.Vertex2;
					VertexEdgeNumber[E.Vertex2Index] = 1; 
				}
				else{
					VertexEdgeNumber[E.Vertex2Index] = VertexEdgeNumber[E.Vertex2Index] + 1; 
				}
				//*************************************************************************************************
				
				AdjacencyMatrix[E.Vertex1Index][E.Vertex2Index] = 1;
		    }
			//******************************************************************************************************
			
			
			
			
			
			
			for(int i = 0; i < NumberofVertex; i++){
			      for(int j = 0; j < NumberofVertex; j++){
			         System.out.printf("%5d ", AdjacencyMatrix[i][j]);
			      }
			      System.out.println();
			}

			
			
		} catch (IOException e) {
			e.printStackTrace();
		} 
		
		
		
	}
	
	private int FindDegreeCentrality(int[] array){
		int indexOfMax = 0;
	    for (int i=0; i < array.length; i++) {
	        if (array[i] > array[indexOfMax]) {
	            indexOfMax = i;
	    }
	    return indexOfMax;
		
	}
	
}
